= Введение =

В средах рабочего стола KDE и GNOME принят идентичны формат «записей рабочего стола»(desktop entries) или файлы конфигурации описывающие как конкретная программа должна запускаться, как она отображается в меню и т. д. В интересах сообщества создание единого стандарта было согласовано всеми сторонами, так что взаимодействие между двумя средами и любыми дополнительными средами, реализующими данную спецификацию, становится проще.

= Именование файлов =

Desktop entry файлы должны заканчиваться на .desktop - расширение файла, исключая файлы <code>Type Directory</code> которые должны иметь расширение <code>.directory</code>. Определение типа файла на основе расширения делает определение типа файла очень простым и быстрым. Если расширение файла отсутствует, настольная система должна вернуться к распознаванию с помощью «магического обнаружения»(magic detection).

Для приложений, часть имени файла до .desktop разрешения должна соответствовать [https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names D-BUS именованию]. То есть это последовательность не пустых элементов, разделенных точками (U+002E FULL STOP), ни одина из которых не начинается с цифры, и каждая из которых содержит только символы из набора [A-Za-z0-9- _]: буквы ASCII, цифры, тире (U+002D ДЕФИС-МИНУС) и подчеркивание (U+005F LOW LINE).

Имя записи рабочего стола должно соответствовать соглашению «обратный DNS»: оно должно начинаться с обратного имени домена DNS, принадлежащее автору приложения, в нижнем регистре. За доменным именем должно следовать название приложения, которое традиционно пишется слитно словами начинающимися  заглавными буквами которые становятся разделителем в стиле - CamelCase. Например, если владелец <code>example.org</code> описывает приложение «Foo Viewer», он может выбрать имя <code>org.example.FooViewer</code>, в результате чего будет создан файл с именем <code>org.example.FooViewer.desktop</code>.

Имя должно соответствовать соглашению об обратном DNS именовании: оно должно начинаться с обратного доменного имени DNS, org.altlinux в нижнем регистре. За доменным именем должно следовать название сервиса, которое обычно пишется слитными словами и начальными заглавными буквами (CamelCase). Например, если имя сервиса "Foo Viewer", пример именования выглядит так: org.altlinux.service.FooViewer.desktop.

Общеизвестные имена, содержащие тире, разрешены, но не рекомендуются, потому что тире не разрешено в некоторых связанных случаях использования обратных имен DNS, таких как пути к объектам D-Bus и имена интерфейсов, а также идентификаторы приложений Flatpak. Если доменное имя автора содержит тире, рекомендуется заменить его символом подчеркивания: это не может привести к двусмысленности, поскольку использование подчеркивания в доменных именах DNS запрещено.

Если доменное имя автора содержит метку, начинающуюся с цифры (что недопустимо в общепринятых именах D-Bus), рекомендуется добавить подчеркивание перед этим элементом имени записи рабочего стола. Например, 7-zip.org может выпустить приложение с именем org._7_zip.Archiver.
писывается файлом desktop

= Идентификатор ID файла рабочего стола =

Каждая запись рабочего стола(desktop entry) определяет приложение идентификатором которого является файл desktop ID, основаный на иммени файла.

Чтобы определить идентификатор файла рабочего стола, необходимо указать полный путь относительно переменной <code>$XDG_DATA_DIRS</code>, затем удалить префикс "applications/", и заменить '/' на '-'.

Для примера <code>/usr/share/applications/foo/bar.desktop</code> имеет идентификатор <code>foo-bar.desktop</code>.

Если несколько файлов имеют одинаковый идентификатор файла рабочего стола, используется первый из них в порядке приоритета $XDG_DATA_DIRS.

Для примера, для <code>$XDG_DATA_DIRS</code> содержит путь по умолчанию <code>/usr/local/share:/usr/share</code>, затем <code>/usr/local/share/applications/org.foo.bar.desktop</code> и <code>/usr/share/applications/org.foo.bar.desktop</code> оба пути обладают одинаковым идентификатором(ID) <code>org.foo.bar.desktop</code>, но только первый будет использован.

Если оба <code>foo-bar.desktop</code> и <code>foo/bar.desktop</code> существуют, нет определенности который изних будет использован.

= Базовый формат файла =

Desktop entry файлы записываются в кодировке UTF-8. Файл интерпретируется как последовательность регистрозависимых строк, разделенных символом перевода строки.

TODO: CHECKIT! не понимаю назначения-смысла.
Совместимые реализации НЕ ДОЛЖНЫ удалять какие-либо поля из файла, даже если они их не поддерживают. Такие поля должны храниться где-то в списке, и если файл будет «перезаписан», они будут включены. Это гарантирует, что любые расширения, специфичные для рабочего стола, будут сохранены, даже если другая система получит доступ к файлу и изменит его.

== Комментарии ==
Строки, начинающиеся с #, и пустые строки считаются комментариями и будут игнорироваться, однако их следует сохранять при чтении и записи файла записи рабочего стола.

== Заголовки групп ==
Заголовок группы с именем <code>groupname</code> это строка в формате:

<code>[groupname]</code>

Имена груп могут содержать любые ASCII символы исключая [ и ] и управлющих символоы.

Группы не могут иметь одинаковые имена.

Любые пары <code>{key,value}</code> следующие после заголовка группы пренадлежат обозначенной группе, до того пока не появится строка с заголовком новой группы.

Базовый формат файла записи Desktop entry требует наличия заголовка группы с именем <code>Desktop Entry</code>. В файле могут присутствовать и другие группы, но это самая важная группа, которая обязательно должна присутствовать. Перед этой группой в файле записи на рабочем столе не должно быть ничего, кроме, возможно, одного или нескольких комментариев.
TODO:CHECKIT! Не понимаю назначения функционала - >>
Эту группу также следует использовать в качестве "magic key" для автоматического определения типа MIME.

== Записи ==

[[#«Записи»]]
Запись в файле это пара <code>{key,value}</code> в формате:

<code>Key=Value</code>

Пробел до и после знака равенства игнорируются. знак <code>=</code> игнорируется.

Только знаки <code>A-Za-z0-9-</code> могут использоваться в имени ключа.

Имена ключей регистро зависимы имя <code>name</code> и <code>NAME</code> не эвивалентны.

Несколько ключей в одной группе не могут иметь одинаковое имя. Ключи в разных группах могут иметь одинаковые имена.


= Возможные типы значений =

Доступные типы значений <code>string, localestring, iconstring, boolean, numeric</code>.
*Значение типа <code>string</code> может содержать любые ASCII  символы исключая контрольные символы.
*Значение типа <code>localestring</code> строки отображаются пользователю, и кодируются в UTF-8.
*Значения типа <code>iconstring</code> названия иконок; могут быть абсолютные пути или символические имена для значков, определяемых с использованием алгоритма, описанного в [http://freedesktop.org/wiki/Standards/icon-theme-spec Спецификации темы значков]. Такие значения не отображаются пользователю и кодируются в UTF-8.
*Значения типа <code>boolean</code> должны быть либо строкой <code>true</code> либо <code>false</code>.
*Значения типа <code>numeric</code> должно быть валидным числовм значением с плавающей точкой как лпределенов <code>%f</code> спецификации для </code>scanf</code> в <code>C</code> локали.

У правляющеие символы <code>\s, \n, \t, \r, \\</code> поддерживаются для значений типа <code>string, localestring и iconstring </code> и означают пробел, новую строку, знак табуляции, возврат коретки и косая черта соответственно.

Некоторые ключи могут иметь множественные значения. В некоторых случаях, значения ключей определено как множдественное: для примера, <code>string(s)</code>. Множественные значения должны быть разделены точкой с запятой и значния ключей могут быть опционально разделены точкой с запятой. Завершающие пустые строки всегда должны разделятся точкой с запятой. точка с запятой как значение должна быть экранирована и использованим знака <code>\;</code>.


== Локализация значений для ключей ==

Ключ с типом <code>localestring</code> и <code>iconstring</code> могут содержать постфикс <code>[LOCAELE]</code>, где <code>LOCAELE</code> это тип локали записи. <code>LOCAELE</code> должен быть <code>lang_COUNTRY.ENCODING@MODIFIER</code>, где <code>lang_COUNTRY.ENCODING</code> и <code>@MODIFIER</code> могут быть опущены. Если встречается ключ с постфиксом, то тот же ключ должен присутствовать и без постфикса.

Когда читается запись файла Desktop Entry, значение ключа выбирается по сопоставлению текущей POSIX локали для значения <code>LC_MESSAGES</code> с постфиксом <code>LOCAELE</code> всех вхождений ключа с удаленной сачатью .ENCODING.


Сопоставление осуществляется следующим образом. Если LC_MESSAGES имеет вид <code>lang_COUNTRY.ENCODING@MODIFIER</code>, то он будет соответсвовать ключу вида <code>lang_COUNTRY@MODIFIER</code>. Если такого ключа не существует, сопоставляется <code>lang_COUNTRY</code>, сосответсвющий <code>lang@MODIFIER</code>. Затем будет предпринята попытка сопоставления с <code>lang</code>. Если соответствующий ключ не найден, используется установленный ключ без указанной локали. Кодировка из значения <code>LC_MESSAGES</code> игнорируется при сопоставлении.

'''Таблица 1. Сопоставление локали'''

{| class="wikitable" style="margin:auto"
|+ Caption text
|-
! '''Значение LC_MESSAGES''' !! '''Возможный порядок сопоставления ключей'''
|-
| lang_COUNTRY@MODIFIER || lang_COUNTRY@MODIFIER, lang_COUNTRY, lang@MODIFIER, lang, значение поумолчанию
|-
| lang_COUNTRY || lang_COUNTRY, lang, значение поумолчанию
|-
| lang@MODIFIER || lang@MODIFIER, lang, значение поумолчанию
|-
| lang || lang, значение поумолчанию
|}

Для примера, если текущее значение <code>LC_MESSAGES</code> равно <code>sr_YU@Latn</code> и Desktop entry файл содержит:

<code>
 Name=Foo
 Name[sr_YU]=...
 Name[sr@Latn]=...
 Name[sr]=...
</code>

тогда значение ключа <code>Name</code> будет взято с постфиксом <code>sr_YU</code>.

Хотя имена значков типа <code>iconstring</code> можно локализовать, они не являются удобочитаемыми строками, поэтому обычно не должны обрабатываться средствами перевода. Большинство приложений не должны локализовать свои значки; исключения могут включать значки, содержащие текст или символы, характерные для данной культуры.


= Общепринятые Desktop entry ключи =

Ключи бывают ДОПОЛНИТЕЛЬНЫМИ или ТРЕБУЕМЫМИ. Если ключ ДОПОЛНИТЕЛЬНЫЙ, он может присутствовать или отсутствовать в файле. Однако, если это не так, реализация стандарта не должна давать сбоев, она должна обеспечивать разумные значения по умолчанию.

Некоторые ключи имеют смысл только в том контексте, когда присутствует другой специфичный ключ, которому присвоено определенное значение. Эти ключи не следует использовать, если его специфичный ключ отсутствует или не установлен в определенное значение. Например, ключ <code>Terminal</code> можно использовать только в том случае, если значением ключа типа является <code>Application</code>.

Если НЕОБХОДИМЫЙ ключ действителен только в контексте другого ключа, установленного на определенное значение, то он должен присутствовать только в том случае, если другой ключ установлен на определенное значение. Например, ключ URL должен присутствовать тогда и только тогда, когда значением ключа <code>Type</code> является <code>Link</code>.

Несколько примеров ключей: <code>Name[C]</code>, <code>Comment[it]</code>.

'''Таблица 2. Стандартные ключи'''

{| class="wikitable" style="margin:auto"
|+ Caption text
|-
! '''Ключ''' !! '''Описание''' !! '''Тип значения''' !! '''Обязательный''' !! '''Тип'''
|-
| Type || Эта спецификация определяет 3 типа записей рабочего стола: <code>Application</code> (тип 1), <code>Link</code> (тип 2) и <code>Directory</code> (тип 3). Чтобы разрешить добавление новых типов в будущем, реализации должны игнорировать записи рабочего стола с неизвестным типом.
 || string || Да ||
|-
| Version || Версия спецификации Desktop Entry, которой соответствует конкретная Desktop Entry. Записи, соответствующие этой версии спецификации, должны использовать версию 1.5. Обратите внимание, что поле версии не обязательно. || string || Нет || 1-3
|-
| Name || Уникальное имя приложения, например "Mozilla" || string || Да || 1-3
|-
| GenericName || Общепринятое название типа приложения, например "Интернет браузер" || string || Нет || 1-3
|-
| NoDisplay || <code>NoDisplay</code> означает «это приложение существует, но не отображает его в меню». Это может быть полезно, например. связать это приложение с типами MIME, чтобы оно запускалось из файлового менеджера (или других приложений), не имея для него пункта меню (для этого есть множество веских причин, включая, например, тип netscape -remote или kfmclient openURL) и т.д.) || boolean || Нет || 1-3
|-
| Comment || Подсказка к записи, например "Просмотр сайтов в Интернете". Это значение не должно совпадать со значениями <code>Name</code> и <code>GenericName</code>. || string || Нет || 1-3
| Icon || Иконка для отображения в файловом менеджере, меню и т. д. Если имя абсолютный путь, будет использоваться указанный файл. Если имя не абсолютный путь, для поиска значка будет использоваться алгоритм, описанный в спецификации темы иконок. [http://freedesktop.org/wiki/Standards/icon-theme-spec  Спецификации темы значка]. || iconstring || Нет || 1-3
|-
| Hidden || Скрытый  --- должен был называться Удаленный. Это означает, что пользователь удалил (на своем уровне) что-то, что присутствовало (на более высоком уровне, например, в системных каталогах). Это строго эквивалентно тому, что файл <code>.desktop</code> вообще не существует, до тех пор пока это нужно пользователью. Это также можно использовать для «удаления» существующих файлов (например, из-за переименования) — разрешив команде <code>make install</code> установить файл со значением <code>Hidden=true</code>. || boolean || Нет || 1-3
|-
| OnlyShowIn, NotShowIn || Список строк, определяющих среды рабочего стола, которые должны отображать/не отображать данную запись рабочего стола.
По умолчанию файл рабочего стола должен отображаться, если не указан ключ <code>OnlyShowIn</code>; в этом случае по умолчанию файл не отображается.
Если установлено значение <code>$XDG_CURRENT_DESKTOP</code>, то оно содержит список строк, разделенных двоеточиями. По порядку рассматривается каждая строка. Если соответствующая запись найдена в <code>OnlyShowIn</code>, отображается файл рабочего стола. Если запись найдена в <code>NotShowIn</code>, файл рабочего стола не отображается. Если ни одна из строк не совпадает, выполняется действие по умолчанию (как указано выше).
Одно и то же имя рабочего стола не может отображаться в <code>OnlyShowIn</code>, так и в <code>NotShowIn</code> группах.
|| string(s) || Нет || 1-3
|-
| DBusActivatable || Логическое значение, определяющее, поддерживается ли активация D-Bus для этого приложения. Если этот ключ отсутствует, значение по умолчанию — false. Если значение истинно, то реализации должны игнорировать ключ Exec и отправлять сообщение D-Bus для запуска приложения. См. «Активация D-Bus» для получения дополнительной информации о том, как это работает. Приложения по-прежнему должны включать строки Exec= в свои файлы рабочего стола для совместимости с реализациями, которые не понимают ключ DBusActivatable. || boolean || Нет ||
|-
| TryExec || Путь к исполняемому файлу на диске, используемый для определения того, действительно ли установлена программа(сервис). Если путь не является абсолютным, файл ищется в переменной среды $PATH. Если файл отсутствует или не является исполняемым, запись можно игнорировать (например, не использовать в меню (не отображать в интерфейсе)). || string || Нет || 1
|-
| Exec || Программа для выполнения, возможно, с аргументами. Подробную информацию о том, как работает этот ключ, см. в разделе «Exec». Ключ Exec необходим, если для DBusActivatable не установлено значение true. Даже если DBusActivatable имеет значение true, Exec следует указать для совместимости с реализациями, которые не понимают DBusActivatable. CHECKIT! Размышления из бесед и записей: Object %O [[#Описание Exec]] || string || Нет || 1
|-
| Path || Путь к элементу описаннному в группе или рабочая дирректория. Актуален не для всех групп. || string || Нет || 1
|-
| Terminal || Определяет запускаяется ли программа в окне или терминале. || boolean || Нет || 1
|-
| Actions || CHECKIT! Возможно нет необходимости. "Идентификаторы действий приложения. Это можно использовать, чтобы указать приложению выполнить определенное действие, отличное от поведения по умолчанию. В разделе "Действия приложения" описывается, как работают действия." || string(s) || Нет || 1
|-
| MimeType || Поддерживаемый MIME тип(ы) || string(s) || Нет || 1
|-
| Categories || Категории отображемые в интерфейсе. [[#Спецификация категорий]]. Актуально не для всех групп. Пример: samba, dhcp,DNS, webserver || string(s) || Нет || 1
|-
| Implements || [[#Интерфейсы]] Список интерфейсов, которые реализует Desktop entry. || string(s) || Нет ||
|-
| Keywords || Дополнительный список ключевых слова для поиска внутри интерфейса. Не должно совпадать с значениями <code>Name</code> и <code>GenericName</code>. || localestring(s) || Нет || 1
|-
| StartupNotify || Если значение true, ИЗВЕСТНО приложение отправит сообщение о удалении при запуске с установленной переменной среды <code>DESKTOP_STARTUP_ID</code>. Если false, ИЗВЕСТНО, что приложение вообще не работает с уведомлением о запуске (не показывает ни одного окна, прерывается даже если используется ключ StartupWMClass и т.д. ). (Более подробную информацию см. в [https://www.freedesktop.org/wiki/Specifications/startup-notification-spec/ спецификации протокола уведомления о запуске]). || boolean || Нет  || 1
|-
| StartupWMClass || Если указано, то известно, что приложение отобразит по крайней мере одно окно с заданной строкой в качестве подсказки его класса WM или имени WM (Более подробную информацию см. в [https://www.freedesktop.org/wiki/Specifications/startup-notification-spec/ спецификации протокола уведомления о запуске]). || boolean || Нет || 1
|-
| URL || Присутствует если запись группа обладает URL  характиристикой || string || Да  || 2
|-
| PrefersNonDefaultGPU || Если true, приложение предпочитает запускаться на более мощном дискретном графическом процессоре если он доступен, который в этой спецификации мы описываем как «графический процессор, отличный от графического процессора по умолчанию», чтобы избежать необходимости определять, что такое дискретный графический процессор и в каких случаях он может считаться более мощным, чем графический процессор по умолчанию. Этот ключ является лишь подсказкой, и поддержка может отсутствовать в зависимости от реализации. || boolean || Нет || 1
|-
| SingleMainWindow || Если true, приложение имеет одно главное окно и не поддерживает открытие дополнительного. Этот ключ используется для подачи сигнала реализации, чтобы избежать запуска  другого окна приложения для пользовательского интерфейса. Этот ключ является лишь подсказкой, и поддержка может отсутствовать в зависимости от реализации. || boolean || Нет || 1
|}

== Ключ Exec Выполнение-запуск ==

[[#Описание EXEC]]
Ключ Exec должен содержать командную строку. Командная строка состоит из исполняемой программы, за которой может следовать один или несколько аргументов. Исполняемую программу можно указать либо с полным путем, либо только с именем исполняемого файла. Если полный путь не указан, исполняемый файл ищется в переменной среды $PATH, используемой рабочей средой. Имя или путь исполняемой программы не могут содержать знак равенства ("="). Аргументы разделяются пробелом.

Аргументы можно передается целиком. Если аргумент содержит зарезервированный символ, аргумент необходимо заключить в кавычки. Правила заключения аргументов в кавычки также применимы к имени исполняемого файла или пути к исполняемой программе, как передано.

Заключение в кавычки должно осуществляться путем заключения аргумента в двойные кавычки и экранирования символа двойной кавычки, символа обратной галочки ("`"), знака доллара ("$") и символа обратной косой черты ("\"), экранируя его дополнительным символом обратной косой черты. Реализации должны отменить кавычки перед раскрытием кодов полей и перед передачей аргумента исполняемой программе. Зарезервированные символы: пробел (""), табуляция, новая строка, двойная кавычка, одинарная кавычка ("'"), символ обратной косой черты ("\"), знак "больше" (">"), знак "меньше" ("<" ), тильда ("~"), вертикальная черта ("|"), амперсанд ("&"), точка с запятой (";"), знак доллара ("$"), звездочка ("*"), вопросительный знак (" ?"), решётка ("#"), круглые скобки ("(") и (")") и обратный апостроф ("`").

Обратите внимание, что общее правило экранирование для значений строкового типа гласит, что символ обратной косой черты также может быть экранирован как ("\\") и что это правило экранирования применяется перед правилом кавычек. Таким образом, для однозначного представления символа обратной косой черты в аргументе в кавычках в файле Desktop entry требуется использование четырех последовательных символов обратной косой черты ("\\\\"). Аналогично, знак доллара в аргументе в кавычках в файле записи рабочего стола однозначно обозначается ("\\$").

Определен ряд специальных кодов полей, которые будут расширены файловым менеджером или средством запуска программ при обнаружении в командной строке. Коды полей состоят из символа процента («%»), за которым следует буквенный символ. Буквенные процентные символы должны быть экранированы как %%. Устаревшие коды полей следует удалить из командной строки и игнорировать. Коды полей раскрываются только один раз, строку, которая используется для замены кода поля, не следует проверять на наличие кодов полей.

Командные строки, содержащие поля с кодом подстановки не указанные в этой спецификации, недействительны и не должны обрабатываться, в частности, реализации могут не обеспечивать поддержку кодов полей, не перечисленных в этой спецификации. Расширения, если таковые имеются, следует вводить посредством нового ключа.

Реализации должны позаботиться о том, чтобы не разрешать коды полей на несколько аргументов, если это явно не указано в этой спецификации. Это означает, что поля имен, имена файлов и другие замены, которые могут содержать пробелы, должны передаваться в качестве одного аргумента исполняемой программе после развертывания.

Хотя ключ <code>Exec</code> определен как имеющий значение типа строки, которое ограничено символами ASCII, расширение кода поля может включать в аргументы символы, отличные от ASCII. Реализации должны позаботиться о том, чтобы все символы в аргументах, передаваемых исполняемой программе, были правильно преобразованы в соответствии с применимыми настройками локали.

Распознаются следующие коды:

{| class="wikitable" style="margin:auto"
|+ Caption text
|-
! '''Код(!CHECKIT?Плэйсхолдер?)''' !! '''Описание'''
|-
| %f || Одно имя файла (включая путь), даже если выбрано несколько файлов. Система, читающая запись на рабочем столе, должна распознавать, что рассматриваемая программа не может обрабатывать несколько аргументов файла, и ей, вероятно, следует создать и выполнить несколько копий программы для каждого выбранного файла, если программа не может обрабатывать дополнительные аргументы файла. Если файлы находятся не в локальной файловой системе (т. е. находятся в расположениях HTTP или FTP), файлы будут скопированы в локальную файловую систему, а %f будет расширен, чтобы указать на временный файл. Используется для программ, которые не понимают синтаксис URL.

|-
| %F || Список файлов. Используйте для приложений, которые могут открывать несколько локальных файлов одновременно. Каждый файл передается как отдельный аргумент исполняемой программе.
|-
| %u || Один URL-адрес. Локальные файлы могут передаваться как URL-адреса файлов или как путь к файлу.
|-
| %U || Список URL-адресов. Каждый URL-адрес передается как отдельный аргумент исполняемой программе. Локальные файлы могут передаваться как URL-адреса файлов или как путь к файлу.
|-
| %i || <code>Icon</code> ключ Desktop entry разворачивается как два аргумента, первый <code>--icon</code> и второй значение ключа <code>Icon</code>.  Icon key is empty or missing.
|-
| %c || Переведенное в соответсви с локалью значение ключа <code>Name</code>
|-
| %k || Местоположение файла Desktop entry в виде URI (если, например, он получен из системы vfolder), либо локального имени файла, либо пустого значения, если местоположение неизвестно.
| %v || Deprecated.
| %m || Deprecated.
|}
