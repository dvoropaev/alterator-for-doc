== Описание интерфейса service ==

Сервис - конкретный набор программ и их конфигурций реализующий какой-либо функционал.

==Методы интерфейса==

=== Info ===
<pre>
Info () -> (Array of [Byte] stdout_bytes, Int32 response)
</pre>
Предназначен для предоставления информации об инструменте диагностики, представленном данным объектом, в формате Alterator Entry - сущность service. Результатом выполнения метода является пара массива байтов stdout_bytes, который содержит Alterator Entry, и response - код взврата.

=== Deploy ===
<pre>
Deploy (String stdin) -> (Int32 response)
</pre>
предназначен для развертывания сервиса. Возвращает  response - код возврата.

=== Start ===
<pre>
Start () -> (Int32 response)
</pre>
Предназначен для запуска сервиса. Возвращает response - код возврата.

=== Stop ===
<pre>
Stop () -> (Int32 response)
</pre>
Предназначен для остановки сервиса. Возвращает response - код возврата.

=== Configure ===
<pre>
Configure (String stdin) -> (Int32 response)
</pre>
Предназначен для настройки уже развёрнутого сервиса. Возвращает response - код возврата.

=== Undeploy ===
<pre>
Undeploy (String stdin) -> (Int32 response)
</pre>
Предназначен для отключения сервиса. Возвращает  код возврата.

=== Backup ===
<pre>
Backup (String stdin) -> (Int32 response)
</pre>
Предназначен для создания резервной копии сервиса. 
Отдаёт response - код возврата.

=== Restore ===
<pre>
Restore (String stdin) -> (Int32 response)
</pre>
Предназначен для восстановления резервной копии сервиса.Возвращает response - код возврата.

=== Status ===
<pre>
Status () -> (Array of stdout_strings, Int32 response)
</pre>
Предназначен для получения статуса сервиса. Результатом выполнения метода является пара массива строк stdout_strings, который содержит информацию о текущем состоянии сервиса, развёрнут/не развёрнут, как был развёрнут, и response - код возврата.

== Варианты сервисов ==
#Файловый сервер
#Контроллер домена
#Сервер DHCP
#Сервер DNS
#Сервер FTP
#Почтовый сервер
#Сервер сетевой установки
#Сервер FreeNX
#Сервер видеоконференций
#Сервер OpenUDS

===Описание сущности .service===
====Базовые категории сущности сервис====

* Инфраструктурные сервисы
* Системные сервисы

Описание сервиса содержит в себе ключи:
* Type - обязательный;
* name - обязательный;
* category - обязательный;
* comment - опицональный.

В нём описаны поля актуальные для настройки большинства сервисов, в частности:

====parameters====
[parametrs.someParamName]
* display_name - обязательный;
* comment - опциональный;
* type - тип принимаемого значения обазательный;
** int
** string
** enum - перечисление возможных значений параметра.

====resources====
[resources.someResourceName]
* display_name - обязательный;
* comment - опциональный;
* path - обязательный.

====services====
[services.someServiceName]
* display_name - обязательный;
* comment - опциональный;
* unit - обязательный.
;
====Контекст отображения====
Для каждого поля предусмотрен контекст применения/отображения параметра:

* context - контекст отображения того или иного параметра;
** deploy - вкладка с параметрами деплоя сервиса;
** status - вкладка со статусом;
** backup - вкладка конфигурации политики бэкапирования;
** restore - вкладка восстановления сервиса;
** diag - предполагается как опция;
** predeploy - вкладка результатов предпроверки; 

Описание:

'''deploy''' - вкладка со всеми параметрами необходимыми для деплоя сервиса.

'''status''' - вывод актуального состояния сервиса на данный момент. Предлагается в него, помимо текущей информации о конфигурации и параметров с которыми сервис был запущен, возвращать ещё некоторые диагностические данные актуальные для мониторинга, например потребление управляющими сервисами памяти, колличества обращений клиентов и прочие.
Эту тему предлагаю дополнительно обсудить, так как в будущем можно будет подумать на тему опции мониторинга - выбрал и вместе с сервисом мониторинг развернулся.

'''backup''' - тут предполагается указывать то где хранить бэкапы и как минимум их ротацию и периодичность.

'''restore''' - восстановление сервиса из бэкапа.

'''diag''' - Галочка которая включает/выключает прогон тестов перед деполем сервиса.
Для успешной развертки ряда сервисов может потребоваться выполнение специфичных условий которые зависят от параметров деплоя (как пример резолв realm в сети при развёртке samba ad).
Параметры необходимые для диагностики лучше бы вытаскивать из диага. Активна или не активна данная опция зависит от наличия интерфейса diag.

'''predeploy''' - Отображение результатов тестирования.

===Дополнительно===

Этот '''entry''' предполагается динамическим, как минимум из-за наличия комбинаций приложений и нескольких режимов работы. Например samba и внутренний dns и samba+bind. Сопровождение двух таких
конфигураций в разных сущностях бессмысленно так как там отличия минимальны.

Информацию о том с какими параметрами был развёрнут сервис предлагается хранить в dconf. Однако при отображении статуса информацию следует брать из файлов конфигурации, так как администраторы
спокойно могут их изменить руками и dconf в данном случае будет служить архивом того как оно было изначально. Так же возникает вопрос как показывать информацию о параметрах. Один из вариантов также
редактировать '''entry''' и отображать данные из него.

'''Остаётся вопрос''' определения того развёрнут ли уже сервис и если да, то в каком режиме. Для разных сервисов тут будт своя, местами, достаточно сложная евристика.
