= Alterator Entry — учебник =

== Назначение и терминология ==
Alterator Entry — спецификация текстовых дескрипторов сущностей Alterator, использующихся для экспорта данных и настроек через D-Bus. Формат основан на подмножестве TOML и применяется для описания приложений, сервисов, компонент, диагностических инструментов и бэкендов. Каждый файл определяет одну сущность и служит источником для интерфейсов Alterator Manager и графических модулей.

== Структура файлов Alterator Entry ==
=== Идентификация и расположение ===
* Имена файлов оканчиваются на расширение, совпадающее с типом (`.application`, `.backend`, `.category`, `.component`, `.diag`, `.object`, `.service`, `.edition`).
* Допустимы короткие и полные названия: для backend можно использовать `name.module.backend` или `name.org.altlinux.alterator.module.backend`.
* Системные экземпляры располагаются под `/usr/share/alterator/<директория сущности>/`. Пользовательские и настраиваемые экземпляры помещаются в `/etc/alterator/<директория сущности>/`. Для бэкендов пользовательского режима используется подкаталог `backends/user/`.
* Директории выбираются по типу: `applications`, `backends`, `components`, `categories`, `diags`, `objects`, `services`, `editions`.

=== Формат и кодировка ===
* Кодировка файлов — UTF-8. Строки регистрозависимы.
* Комментарии начинаются с `#`; пустые строки сохраняются.
* Минимальный шаблон включает базовую секцию `[Alterator Entry]`. Дополнительные секции допустимы.

=== Ключи и значения ===
* Запись задаётся в виде `Key=Value`; символ `=` единственный разделитель, пробелы по бокам игнорируются.
* Имя ключа допускает символы `[A-Za-z0-9-]`; имена регистрозависимы.
* В пределах группы ключи уникальны; в разных группах допустимы совпадения.

=== Типы значений ===
* `string` — ASCII без управляющих символов.
* `localestring` — пользовательские строки в UTF-8.
* `iconstring` — имя значка или путь; обрабатывается по спецификации freedesktop.org.
* `stringlist` — список строк, разделённых пробелом.
* `command` — команда оболочки.
* `boolean` — `true` или `false`.
* `numeric` — число в формате `%f` (локаль C).
* `polkit.actions` — зарезервированный список действий polkit.
* Управляющие последовательности `\s`, `\n`, `\t`, `\r`, `\\`, `\;` поддерживаются в строковых типах.

=== Локализация строк ===
* Локализованные варианты оформляются постфиксом `[LOCALE]`, где `LOCALE = lang_COUNTRY.ENCODING@MODIFIER`; допускается усечение части.
* При чтении значения сопоставляются с `LC_MESSAGES`; порядок: `lang_COUNTRY@MODIFIER`, `lang_COUNTRY`, `lang@MODIFIER`, `lang`, вариант без постфикса.
* Значения `iconstring` переводятся только при необходимости (например, текст в изображении).

=== Базовый шаблон ===
<pre>
[Alterator Entry]
name = "example"
type = "Service"
display_name = "Example"
comment = "Описание"
</pre>

== Стандартные ключи и расширения ==
=== Обязательные и дополнительные поля ===
{| class="wikitable"
! Ключ !! Назначение !! Тип !! Обязательность
|-
| name || Уникальный идентификатор сущности. || string || Да
|-
| type || Тип сущности: Application, Backend, Component, Category, Diag, Object, Service, Edition. || string || Да (для глобальной секции)
|-
| display_name || Отображаемое имя с возможностью локализации. || localestring || Нет
|-
| comment || Краткое описание. || localestring || Нет
|-
| icon || Имя значка или путь к файлу. || iconstring || Нет
|}

{| class="wikitable"
! Дополнительный ключ !! Назначение !! Тип
|-
| exec || Команда запуска; поддерживает плейсхолдеры `%o`, `%i`, `%f`, `%F`, `%u`, `%U`, `%c`. || command
|-
| path || Рабочая директория или путь к ресурсу. || string
|-
| terminal || Признак необходимости терминала. || boolean
|-
| action_id || Идентификатор polkit; по умолчанию формируется из имени интерфейса. || string
|-
| thread_limit || Лимит параллельных запусков (по умолчанию 10 для интерфейса, 1 для метода). || numeric
|}

=== Плейсхолдеры ключа exec ===
* `%o` — имя объекта.
* `%i` — имя интерфейса.
* `%f` — один файл; при множественном выборе приложение запускается несколько раз.
* `%F` — список файлов.
* `%u` — один URL.
* `%U` — список URL.
* `%c` — локализованное значение `display_name`.
* Важно: зарезервированные символы (` ", ', \\, ~, |, &, ;, $, *, ?, #, (, )`) требуется экранировать; для обратной косой черты используются четыре `\\` внутри кавычек, знак `$` передаётся как `\\$`.

=== Расширение и неймспейсы ===
* Стандартные изменения обсуждаются коллективно.
* Производные ключи оформляются префиксом `X-<ПРОДУКТ>`: `X-NewDesktop-Foo=value`.
* Собственные секции оформляются как `[X-PRODUCT GroupName]`.

== Сущности Alterator Entry ==
=== Application ===
* Описывает прикладной модуль, отображающий объекты заданного интерфейса.
* Поля: `interface` (обязателен), `exec` (обязателен), `category` (опционален, задаёт принадлежность), стандартные ключи.
* Команда `exec` может использовать `%o` и `%i` для передачи имени объекта и интерфейса.

=== Category ===
* Группирует объекты и приложения в интерфейсе Alterator.
* Поддерживает вложенность через поле `category`.
* Рекомендуемые базовые категории: «СУБД», «Веб-сервер».
* Дополнительные ключи: `short_display_name` для компактного отображения.
* Ключ `icon` указывает имя значка по спецификации freedesktop icon naming.

=== Object ===
* Используется для произвольных сущностей без специализированного типа.
* Минимальный набор: стандартные ключи.
* Поле `override` позволяет заместить одноимённый объект, предоставляемый другим пакетом или интерфейсом.

=== Backend ===
* Определяет D-Bus интерфейс, реализуемый модулем Alterator Manager.
* Обязательные поля: `module`, `interface`, `name`, `methods`.
* `module` — имя обработчика (на текущий момент `executor`).
* `interface` задаётся полным именем D-Bus либо коротким идентификатором без точек; в последнем случае автоматически добавляется префикс `org.altlinux.alterator.`.
* `name` формирует часть пути объекта D-Bus и добавляется к `/org/altlinux/alterator/`.
* `thread_limit` задаёт общий лимит потоков; `action_id` связывает интерфейс с политикой polkit.
* Таблица `methods` содержит секции с именем метода и набором полей:
** `execute` — команда bash с параметрами вида `{param}`.
** `stdout_strings`/`stdout_bytes` — включение возврата массива строк или байтов (`enabled`).
** При активации `stdout_bytes` возврат строк отключается и в методе, и в связанных сигналах.
** `stderr_strings` — возврат stderr строк.
** `stdout_byte_limit`/`stdout_strings_limit`/`stderr_strings_limit` — лимиты (байты, по умолчанию 524288).
** `stdout_signal_name` и `stderr_signal_name` — переназначение сигналов.
** `action_id`, `timeout`, `thread_limit` — переопределения для метода; `timeout` задаёт время до SIGKILL (секунды, по умолчанию 60, значения ≤ 0 отключают ограничение).

=== Component ===
* Представляет набор пакетов и последовательность действий для развертывания подсистемы.
* Дополнительные поля: `short_display_name`, `category`, `arches`, `packages`.
* `packages` — словарь, где для каждого пакета доступны опции `meta`, `arch`, `exclude_arch`, `desktop`.
* Поле `meta=true` помечает мета-пакеты; при отсутствии ключа считается `false`.
* `arch` и `exclude_arch` перечисляют доступные и исключённые архитектуры; допускаются только значения из установленного списка.
* Допустимые архитектуры: `aarch64`, `E2K`, `IA32`, `mipsel`, `ppc64`, `s390x`, `x86_64`, `X86`, `riscv64`, `loongarch64`.

=== Edition ===
* Описывает редакцию дистрибутива.
* Поля: `license`, `arches`, `kflavours`, `sections`, `languages`, `desktop_environment`.
* `sections` — словарь групп компонент (например, «Базовое ПО», «Дополнительные пакеты»).
* `arches` допускает только архитектуры из списка: `aarch64`, `E2K`, `IA32`, `mipsel`, `ppc64`, `s390x`, `x86_64`, `X86`, `riscv64`, `loongarch64`.

=== Service ===
* Описывает сервис, управляемый через интерфейс `org.altlinux.alterator.service1`.
* Дополнительные поля: `enable_force_deploy`, `parameters`, `resources`, `diag_tools`.
* `enable_force_deploy=true` разрешает повторный вызов `Deploy()` и активирует служебный параметр `force_deploy`.
* `parameters` — словарь описаний параметров:
** Общие ключи: `display_name`, `comment`, `type`, `password`, `array_type`, `array_min`, `array_max`, `values`, `pattern`, `min`, `max`, `default`, `constant`, `context`, `required`.
** `password=true` доступно только для строковых параметров и скрывает ввод.
** Допустимые типы: `string`, `boolean`, `integer`, `enum`, `array`, `object`.
** `array_type` принимает значения `string`, `integer`, `enum`, `object` и определяет тип элементов.
** Контекст перечисляется из множества `deploy`, `configure`, `restore`, `backup`, `diag`, `status`, `predeploy`.
** Для `object` доступны поля `properties`, `exclusive`, `prototype`; дочерние параметры с `constant=true` служат фиксированными вариантами.
** Элементы `values` для перечислений содержат локализуемое поле `display_name` для каждого допустимого значения.
** Поле `required` перечисляет контексты, где параметр обязателен; отсутствие записи означает необязательность.
** `constant=true` делает параметр неизменяемым; такие элементы используются для скрытых служебных значений.
** `pattern` задаёт регулярное выражение для строковых параметров.
** `min`/`max` применяются к числовым параметрам; `array_min`/`array_max` ограничивают размер массивов.
** `default` задаёт значение по умолчанию для отображения и первичного заполнения.
* `resources` — описание зависимых объектов:
** `type` принимает значения `file`, `directory`, `systemd_unit`, `port`.
** `path`, `unit_name`, `inet_service` — структуры с обязательным полем `value`; `value` задаёт путь (string) либо номер порта (integer), `parameter` связывает ресурс с параметром.
** Для портов обязательно указывать `tcp`/`udp`.
* `diag_tools` — ссылка на диагностические интерфейсы (`bus`, `path`).
* `bus` принимает значения `system` или `session`; `path` содержит D-Bus путь инструмента.
* Служебные параметры: `deployed` (status), `started` (status), `force_deploy` (deploy; доступен при `enable_force_deploy=true`).

=== Diag (Diagnostictool) ===
* Описывает диагностический инструмент и набор тестов.
* Базовая секция `[Alterator Entry]` включает ключи `name`, `type = "Diag"`, `comment`, `display_name` и список `DiagTask` — идентификаторов тестов через `;`.
* Для каждого элемента списка создаётся группа `[DiagTask <имя>]` с полями `Name`, `DisplayName`, `Comment`.
* Обязательные поля: `report_suffix`, `tests`.
* Дополнительные поля: `assignment` (System/User/Universal).
* Структура элемента `tests` включает `display_name`, `comment`, `icon`, `assignment` и параметры запуска теста (команды, сценарии).
* Результаты тестов сохраняются с расширением `report_suffix`.

== Backend-файлы и размещение ==
* Бэкенды с режимом `--user` читаются из `/usr/share/alterator/backends/user/` и `/etc/alterator/backends/user/`.
* В обычном режиме задействуются каталоги `/usr/share/alterator/backends/`, `/usr/share/alterator/backends/system/`, `/etc/alterator/backends/`, `/etc/alterator/backends/system/` в указанном порядке.
* Один файл описывает один D-Bus объект; дубликаты интерфейсов игнорируются.
* Файлы читаются в формате TOML; поля с незнакомыми ключами должны сохраняться при перезаписи.

== Интерфейс org.altlinux.alterator.service1 ==
=== Методы ===
* `Info () -> (Array of [Byte] stdout_bytes, Int32 response)` — возвращает дескриптор сервиса в формате Alterator Entry.
* `Deploy (String stdin) -> (Int32 response)` — развертывает сервис; на вход подаются параметры.
* `Start () -> (Int32 response)` — запускает связанные systemd-юниты.
* `Stop () -> (Int32 response)` — останавливает юниты.
* `Configure (String stdin) -> (Int32 response)` — применяет конфигурацию к развернутому сервису.
* `Undeploy (String stdin) -> (Int32 response)` — удаляет сервис.
* `Backup (String stdin) -> (Int32 response)` — создаёт резервную копию.
* `Restore (String stdin) -> (Int32 response)` — восстанавливает из резервной копии.
* `Status () -> (Array of stdout_strings, Int32 response)` — возвращает сводку о состоянии сервиса.

=== Сигналы ===
* `service_stdout_signal(String)` — построчная передача stdout из выполняемых действий.
* `service_stderr_signal(String)` — построчная передача stderr.

=== Контексты интерфейса ===
* `deploy` — параметры развёртывания.
* `predeploy` — результаты предпроверок.
* `status` — текущее состояние и диагностические данные.
* `backup` — политика резервного копирования.
* `configure` — параметры донастройки после развёртывания.
* `restore` — восстановление из бэкапа.
* `diag` — включение прогонов тестов перед развёртыванием.
* Важно: параметры диагностик должны соответствовать интерфейсам, указанным в `diag_tools`.

== Объект /org/altlinux/alterator/global ==
=== Интерфейс categories ===
* `List` — возвращает список категорий.
* `Info` — выдаёт дескриптор категории по имени (код 1 при отсутствии).

=== Интерфейс applications ===
* `List` — перечисляет локально установленные приложения.
* `Info` — возвращает дескриптор приложения по имени (код 1 при отсутствии).

== Проверка и сопровождение ==
=== Порядок работы с файлами ===
# Разместить файл в каталоге типа (`/usr/share/alterator/...` либо `/etc/alterator/...`).
# Провести синтаксическую проверку `alterator-entry validate <файл>` (при наличии утилиты).
# Убедиться, что D-Bus интерфейсы появились: `gdbus introspect --system --dest org.altlinux.alterator --object-path /org/altlinux/alterator`.
# Проверить работу методов через `alteratorctl` или вызовы D-Bus.

=== Рекомендации по обновлению ===
* Всегда добавлять локализованные поля `display_name.ru` и `display_name.en` для отображаемых значений.
* Для новых ключей использовать имена с префиксом `X-` либо отдельные секции, чтобы избежать конфликтов.
* Согласовывать изменения, влияющие на стандартные поля, с разработчиками Alterator Manager.
* Учитывать требуемые права polkit: при отсутствии `action_id` идентификатор формируется автоматически на основе имени интерфейса.
* При описании сервисов фиксировать параметры ресурсов, чтобы вкладка статуса отображала актуальные пути и юниты.
